openapi: 3.0.0
info:
  description: The API of the sound system in the DolorLectum.
  title: sound-system
  version: 1.0.0
servers:
- url: /
paths:
  /songs:
    get:
      description: Get the songs in the playing queue.
      responses:
        "200":
          content:
            json/application:
              schema:
                items:
                  $ref: '#/components/schemas/stored_song'
                type: array
          description: The queue of the songs.
    post:
      description: Add a song in the playing queue.
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          json/application:
            schema:
              properties:
                id:
                  example: 123e4567-e89b-12d3-a456-426614174000
                  format: uuid
                  type: string
              type: object
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/queued_song'
          description: Successfully added song to the queue.
        "404":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: The requested song was not found in the internal storage.
  /songs/{i}:
    delete:
      description: Delete the i-th song from the queue.
      parameters:
      - description: The index of the song.
        explode: false
        in: path
        name: i
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: The i-th song was deleted.
        "404":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Song not found in the queue.
    get:
      description: Get the i-th song in the playing queue.
      parameters:
      - description: The index of the song.
        explode: false
        in: path
        name: i
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/queued_song'
          description: The i-th song.
        "404":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Song not found in the queue.
  /status:
    get:
      description: Read the status of the device.
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/status'
          description: The status of the sound system (playing/paused/idle).
    post:
      description: Update the status of the device.
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          json/application:
            schema:
              properties:
                status:
                  enum:
                  - playing
                  - paused
                  - stopped
                  example: paused
                  type: string
              type: object
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/status'
          description: The status of the system was changed.
        "400":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Invalid target status.
  /storage:
    get:
      description: Get the list of stored songs.
      responses:
        "200":
          content:
            json/application:
              schema:
                items:
                  $ref: '#/components/schemas/stored_song'
                type: array
          description: The list of stored songs.
    post:
      description: Create an entry for a new song in the storage.
      requestBody:
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/base_song'
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/stored_song'
          description: Successfully added song to the storage.
        "400":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Invalid file format or file already uploaded.
  /storage/{id}:
    delete:
      description: Delete some stored song.
      parameters:
      - description: The id of the stored song.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: The song was deleted.
        "404":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Song not found in storage.
    get:
      description: Get the entry of a stored song.
      parameters:
      - description: The id of the stored song.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/stored_song'
          description: Description of the song.
        "404":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Song not found in storage.
    put:
      description: Upload the file associated with a song entry.
      parameters:
      - description: The id of the stored song.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/stored_song'
          description: File uploaded.
        "400":
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/message'
          description: Invalid format.
components:
  requestBodies:
    inline_object_1:
      content:
        json/application:
          schema:
            $ref: '#/components/schemas/inline_object_1'
    inline_object:
      content:
        json/application:
          schema:
            $ref: '#/components/schemas/inline_object'
  schemas:
    base_song:
      example:
        name: The house of the Rising Sun
        format: mp3
      properties:
        name:
          type: string
        format:
          type: string
      required:
      - format
      - name
      type: object
    stored_song:
      allOf:
      - $ref: '#/components/schemas/base_song'
      - $ref: '#/components/schemas/stored_song_allOf'
    queued_song:
      allOf:
      - $ref: '#/components/schemas/stored_song'
      - $ref: '#/components/schemas/queued_song_allOf'
    message:
      example:
        message: More details about it
      properties:
        message:
          type: string
      type: object
    status:
      example:
        status: playing
        current_song:
          name: The house of the Rising Sun
          format: mp3
          id: 123e4567-e89b-12d3-a456-426614174000
          length: 249
          size: 1.5
          index: 5
        current_second: 42
      properties:
        status:
          enum:
          - playing
          - paused
          - stopped
          type: string
        current_song:
          $ref: '#/components/schemas/queued_song'
        current_second:
          type: integer
      type: object
    inline_object:
      properties:
        id:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
      type: object
    inline_object_1:
      properties:
        status:
          enum:
          - playing
          - paused
          - stopped
          example: paused
          type: string
      type: object
    stored_song_allOf:
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        length: 249
        size: 1.5
      properties:
        id:
          format: uuid
          type: string
        length:
          format: seconds
          type: integer
        size:
          format: MiB
          type: number
      type: object
    queued_song_allOf:
      example:
        index: 5
      properties:
        index:
          type: integer
      type: object
