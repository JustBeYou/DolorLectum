# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, power=None, red=None, green=None, blue=None):  # noqa: E501
        """Status - a model defined in OpenAPI

        :param power: The power of this Status.  # noqa: E501
        :type power: str
        :param red: The red of this Status.  # noqa: E501
        :type red: float
        :param green: The green of this Status.  # noqa: E501
        :type green: float
        :param blue: The blue of this Status.  # noqa: E501
        :type blue: float
        """
        self.openapi_types = {
            'power': str,
            'red': float,
            'green': float,
            'blue': float
        }

        self.attribute_map = {
            'power': 'power',
            'red': 'red',
            'green': 'green',
            'blue': 'blue'
        }

        self._power = power
        self._red = red
        self._green = green
        self._blue = blue

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def power(self):
        """Gets the power of this Status.


        :return: The power of this Status.
        :rtype: str
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this Status.


        :param power: The power of this Status.
        :type power: str
        """
        allowed_values = ["full_power", "normal_power", "power_saving", "false"]  # noqa: E501
        if power not in allowed_values:
            raise ValueError(
                "Invalid value for `power` ({0}), must be one of {1}"
                .format(power, allowed_values)
            )

        self._power = power

    @property
    def red(self):
        """Gets the red of this Status.


        :return: The red of this Status.
        :rtype: float
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this Status.


        :param red: The red of this Status.
        :type red: float
        """

        self._red = red

    @property
    def green(self):
        """Gets the green of this Status.


        :return: The green of this Status.
        :rtype: float
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this Status.


        :param green: The green of this Status.
        :type green: float
        """

        self._green = green

    @property
    def blue(self):
        """Gets the blue of this Status.


        :return: The blue of this Status.
        :rtype: float
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this Status.


        :param blue: The blue of this Status.
        :type blue: float
        """

        self._blue = blue
